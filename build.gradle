plugins {
   id 'java-library'
   id 'maven-publish'
   id 'com.jfrog.bintray' version '1.8.4'
   id 'de.clashsoft.simple-publish' version '0.5.0'
   id 'com.palantir.revapi' version '1.1.2'
}

// --------------- General Info ---------------

group = 'org.fulib'
version = 'git describe --tags'.execute().text[1..-2] // strip v and \n
description = 'Fulib Tables are the model query and transformation mechanisms provided by Fulib.'

publishInfo {
   organization = 'fujaba'
   githubRepo = 'fujaba/fulibTables'
   labels = [ 'fulib', 'model', 'query', 'transformation', 'tables' ]

   developer {
      id = 'zuendorf'
      name = 'Albert Zuendorf'
   }
   developer {
      id = 'digitalhoax'
      name = 'Tobias George'
   }
   developer {
      id = 'eicke123'
      name = 'Christoph Eickhoff'
   }

   license {
      name = 'MIT License'
      url = 'http://www.opensource.org/licenses/mit-license.php'
   }
}

sourceCompatibility = 1.8

sourceSets.create('gen')

// --------------- Dependencies ---------------

repositories {
   mavenLocal()
   mavenCentral()
   jcenter()
}

dependencies {
   // https://mvnrepository.com/artifact/org.fulib/fulibYaml
   api group: 'org.fulib', name: 'fulibYaml', version: '1.2.0'

   // https://mvnrepository.com/artifact/org.slf4j/slf4j-nop
   testRuntimeOnly group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.28'

   // https://mvnrepository.com/artifact/junit/junit
   testImplementation group: 'junit', name: 'junit', version: '4.12'

   // https://mvnrepository.com/artifact/org.fulib/fulib
   def fulib = [ group: 'org.fulib', name: 'fulib', version: '1.1.0' ]

   // https://mvnrepository.com/artifact/org.fulib/fulibTools
   def fulibTools = [ group: 'org.fulib', name: 'fulibTools', version: '1.2.0-dev.1' ]

   genCompile fulib
   genCompile fulibTools

   testImplementation fulib
   testImplementation fulibTools
}

// --------------- Misc. Settings ---------------

revapi {
   oldVersion = '1.1.0'
}

tasks.named('test') {
   def codeFragmentFiles = fileTree(it.workingDir).include('**/*.java', '**/*.md', 'build.gradle')
   it.inputs.files(codeFragmentFiles)
   // enabling those makes cleanTest delete all java and markdown files :O
   // it.outputs.files(codeFragmentFiles)
   // it.outputs.dir('doc')
}
