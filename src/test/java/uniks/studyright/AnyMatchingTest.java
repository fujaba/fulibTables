package uniks.studyright;

import org.fulib.FulibTables;
import org.fulib.patterns.PatternBuilder;
import org.fulib.patterns.PatternMatcher;
import org.fulib.patterns.model.PatternObject;
import org.fulib.tables.ObjectTable;
import org.junit.Before;
import org.junit.Test;
import uniks.studyright.model.Room;
import uniks.studyright.model.Student;
import uniks.studyright.model.University;

import java.util.Collections;

import static org.junit.Assert.assertEquals;

public class AnyMatchingTest
{
   private Object[] roots;
   private University studyRight;
   private Student alice;
   private Student bob;

   @Before
   public void scenario()
   {
      // --- end of code generated by solution scenario ---
      University studyRight = new University();
      studyRight.setName("StudyRight");

      Student alice = new Student();
      alice.setName("Alice");
      alice.setCredits(20);

      Student bob = new Student();
      bob.setName("Bob");
      bob.setCredits(10);

      studyRight.withStudents(alice, bob);

      for (int i = 0; i < 5; i++)
      {
         studyRight.withRooms(new Room().setTopic("T" + i).setRoomNo("R" + i).setCredits(i * 10));
      }
      // --- end of code generated by solution scenario ---

      this.studyRight = studyRight;
      this.alice = alice;
      this.bob = bob;
      // captured by fulibScenarios
      this.roots = new Object[] { studyRight, alice, bob };
   }

   @Test
   public void knownObjectKnownAttribute()
   {
      // Normal case, already generated by fulibScenarios

      // We expect that studyRight has name "StudyRight".
      assertEquals("StudyRight", this.studyRight.getName());
   }

   @Test
   public void knownObjectUnknownAttribute()
   {
      // We expect that studyRight has some attribute with value "StudyRight".

      final PatternBuilder builder = FulibTables.patternBuilder();

      final PatternObject studyRight = builder.buildPatternObject("studyRight");
      final PatternObject studyRightAttr1 = builder.buildPatternObject("studyRightAttr1");
      builder.buildEqualityConstraint(studyRightAttr1, "StudyRight");
      builder.buildPatternLink(studyRight, null, "*", studyRightAttr1);

      final PatternMatcher matcher = FulibTables.matcher(builder.getPattern());
      final ObjectTable match = matcher.match("studyRight", this.studyRight);
      assertEquals(1, match.toList().size()); // TODO match.size()

      // TODO quite a lot of boilerplate, hmm

      // this is not part of the generated code, but a sanity check:
      assertEquals(Collections.singletonList(this.studyRight), match.toList());
   }

   @Test
   public void unknownObjectKnownAttribute()
   {
      // We expect that there is some object c20 with 20 credits.

      final PatternBuilder builder = FulibTables.patternBuilder();
      final PatternObject c20 = builder.buildPatternObject("c20");
      final PatternObject c20Credits = builder.buildPatternObject("c20Credits");

      builder.buildEqualityConstraint(c20Credits, 20.0);
      builder.buildPatternLink(c20, null, "credits", c20Credits);

      final PatternMatcher matcher = FulibTables.matcher(builder.getPattern());
      final ObjectTable match = matcher.match("c20", this.roots);
      assertEquals(1, match.toList().size()); // TODO match.size()

      // sanity check, not part of generated code:
      assertEquals(Collections.singletonList(this.alice), match.toList());
   }

   @Test
   public void nonRootObjectKnownAttribute()
   {
      // We expect that there is some object r3 with roomNo R3.

      final PatternBuilder builder = FulibTables.patternBuilder();
      final PatternObject roots = builder.buildPatternObject("roots");
      final PatternObject r3 = builder.buildPatternObject("r3");
      final PatternObject r3RoomNo = builder.buildPatternObject("r3RoomNo");

      // TODO must traverse the whole object graph to find any path (in this case of length 1 / single link).
      //      OR:
      //      instead of this, we can flatten all connected objects into an array and use that as roots.
      // builder.buildPatternPath(roots, r3);
      builder.buildEqualityConstraint(r3RoomNo, "R3");
      builder.buildPatternLink(r3, null, "roomNo", r3RoomNo);

      final PatternMatcher matcher = FulibTables.matcher(builder.getPattern());
      final ObjectTable match = matcher.match("roots", this.roots);
      assertEquals(1, match.toList().size()); // TODO match.size()
   }

   @Test
   public void unknownObjectsUnknownAttributes()
   {
      final String packageName = University.class.getPackage().getName();

      final PatternBuilder builder = FulibTables.patternBuilder(packageName);

      // We expect that there is some object studyRight
      final PatternObject studyRight = builder.buildPatternObject("studyRight");

      // that has some attribute with value "StudyRight".
      final PatternObject studyRightAttr1 = builder.buildPatternObject("studyRightAttr1");
      builder.buildEqualityConstraint(studyRightAttr1, "StudyRight");
      builder.buildPatternLink(studyRight, null, "*", studyRightAttr1);

      // We expect that there is some object alice
      final PatternObject alice = builder.buildPatternObject("alice");

      // that has some attribute with value "Alice"
      final PatternObject aliceAttr1 = builder.buildPatternObject("aliceAttr1");
      builder.buildEqualityConstraint(aliceAttr1, "Alice");
      builder.buildPatternLink(alice, null, "*", aliceAttr1);

      // and that has some attribute with value 10.
      final PatternObject aliceAttr2 = builder.buildPatternObject("aliceAttr2");
      builder.buildEqualityConstraint(aliceAttr2, 20.0);
      builder.buildPatternLink(alice, null, "*", aliceAttr2);

      // We expect that there is some object bob
      final PatternObject bob = builder.buildPatternObject("bob");

      // that has some attribute with value "Bob"
      final PatternObject bobName = builder.buildPatternObject("bobName");
      builder.buildEqualityConstraint(bobName, "Bob");
      builder.buildPatternLink(bob, null, "*", bobName);

      // and that has some attribute with value 20.
      final PatternObject bobCredits = builder.buildPatternObject("bobCredits");
      builder.buildEqualityConstraint(bobCredits, 10.0);
      builder.buildPatternLink(bob, null, "*", bobCredits);

      // We expect that studyRight has some link to alice and bob.
      builder.buildPatternLink(studyRight, null, "*", alice);
      builder.buildPatternLink(studyRight, null, "*", bob);

      // Do match

      PatternMatcher matcher = FulibTables.matcher(builder.getPattern());
      ObjectTable start = matcher.match("studyRight", this.roots);
      assertEquals(1, start.rowCount());

      System.out.println(start);
   }
}
